#!/bin/bash

# SPDX-License-Identifier: GPL-2.0

# Database file
DBFILE="$HOME/.ci/database/ci-reports.sqlite3"

# Print a hopefully useful help text.
help() {
	cat << EOF
Usage:
bootc-build -p <project> -w <working-dir> [-u]

Options:
	-p <project>		Project name (mandatory)
	-w <directory>		Working directory (mandatory)
	-u					Upload to server (optional)
	-b					Build ID
	-h					Show this help
EOF
	exit 0
}

while getopts "p:w:b:uh" flag; do
	case $flag in
		p) PROJECT=$OPTARG ;;
		w) WORKDIR=$OPTARG ;;
		u) UPLOAD="true" ;;
		h) help ;;
		b) BUILD_ID=$OPTARG ;;
		*)
			help
			;;
	esac
done

# Show help if a mandatory option is missing
if [ -z "$PROJECT" ] || [ -z "$WORKDIR" ]; then
	help
fi

# Initialize status variables
MANIFEST=0
BUILD=0
PUSH=0
SUCCESS=0

# Check if the triggered build is supported to avoid dead images
if [ ! -f $HOME/.ci/${PROJECT}/.build-running ]; then
	if [ ! -d $HOME/.ci/${PROJECT} ]; then
		mkdir -p $HOME/.ci/${PROJECT}
	fi

	# Lock the build to avoid concurrent builds of the same type.
	touch $HOME/.ci/${PROJECT}/.build-running

	# Remove manifest if it exists
	podman manifest rm dirk1980/${PROJECT}:latest 2> /dev/null

	# Create the manifest
	podman manifest create -a dirk1980/${PROJECT}:latest
	if [ $? -eq 0 ]; then MANIFEST=1; fi

	podman build \
		--platform linux/amd64,linux/arm64 \
		--build-arg buildid=${BUILD_ID} \
		--security-opt label=type:unconfined_t \
		--squash-all \
		--pull=always \
		--manifest dirk1980/${PROJECT}:latest ${WORKDIR}

	if [ $? -eq 0 ]; then BUILD=1; fi

	if [ "$UPLOAD" == "true" ]; then
		# Push image.
		podman manifest push \
			--authfile $HOME/.ci/.podman/auth.json dirk1980/${PROJECT}:latest
		if [ $? -eq 0 ]; then PUSH=1; fi
	fi

	# We are done so remove lock file
	rm -f $HOME/.ci/${PROJECT}/.build-running
fi
