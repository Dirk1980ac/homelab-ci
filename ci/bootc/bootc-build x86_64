#!/bin/bash

# SPDX-License-Identifier: GPL-2.0

# Parse command line arguments
while getopts "p:w:t:b:uh" flag; do
	case $flag in
		p) PROJECT=$OPTARG ;;
		b) BUILD_ID=$OPTARG ;;
		w) WORKDIR=$OPTARG ;;
		t) TARGET=$OPTARG ;;
		u) UPLOAD="true" ;;
		h) help ;;
		*) echo 'Unknown option.' && help ;;
	esac
done

# Print a hopefully useful help text.
help() {
	cat << EOF
Usage:
bootc-build -p <project> -w <working-dir> -b <build-id> -t <target> [-u]

Options:
	-p <project>		Project name (mandatory)
	-w <directory>		Working directory (mandatory)
	-b <Build ID>		Build ID for the image (mandatory)
	-t <target>			Stable or nightly target (mandatory)
	-u					Upload to server (optional)
	-h					Show this help
EOF
	exit 1
}

# Show help if a mandatory option is missing
if [ -z "$PROJECT" ] || [ -z "$BUILD_ID" ] || [ -z "$WORKDIR" ] \
	|| [ -z "$TARGET" ]; then
	help
fi

# Database file
DBFILE="$HOME/.ci/database/ci-reports.sqlite3"

# Clean up if SIGINT occurs
cleanup() {
	rm -f $HOME/.ci/${PROJECT}/.$TARGET-running
}

# Trap interrupt signal
trap "cleanup; exit 1" INT

# Initialize status variables
MANIFEST=0
BUILD=0
PUSH=0
SUCCESS=0

# Check if the triggered build is supported to avoid dead images
if [ "$TARGET" != "nightly" ] && [ "$TARGET" != "stable" ]; then
	echo "Target must be 'nightly' or 'stable'." && exit 1
fi

# Check if the desired build is already running
if [ ! -f $HOME/.ci/${PROJECT}/.$TARGET-running ]; then
	# No build running, so: ABRAKADABRA!
	if [ ! -d $HOME/.ci/${PROJECT} ]; then
		mkdir -p $HOME/.ci/${PROJECT}
	fi

	# Lock the build to avoid concurrent builds of the same type.
	touch $HOME/.ci/${PROJECT}/.$TARGET-running

	podman build --build-arg buildid=${BUILD_ID} \
		--cache-ttl=12h \
		--security-opt label=type:unconfined_t \
		--pull=always -t dirk1980/${PROJECT}:$TARGET ${WORKDIR}

	if [ $? -eq 0 ]; then BUILD=1; fi

	if [ "$UPLOAD" == "true" ]; then
		# Push image.
		podman push --authfile $HOME/.ci/.podman/auth.json \
			dirk1980/${PROJECT}:$TARGET

		# Push stable image as latest on stable build
		if [ "$TARGET" == "stable" ]; then
			podman push --authfile $HOME/.ci/.podman/auth.json \
				dirk1980/${PROJECT}:stable docker.io/dirk1980/${PROJECT}:latest
		fi
	fi

	# We are done so remove lock file
	rm -f $HOME/.ci/${PROJECT}/.$TARGET-running
fi

# Reset trap for SIGINT.
trap "cleanup" INT
